version: '3.8'

services:
  # OpenSports API
  opensports-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opensports-api
    ports:
      - "8000:8000"
    environment:
      - OPENSPORTS_ENV=production
      - DATABASE_URL=postgresql://opensports:opensports@postgres:5432/opensports
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - opensports-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: opensports-postgres
    environment:
      - POSTGRES_DB=opensports
      - POSTGRES_USER=opensports
      - POSTGRES_PASSWORD=opensports
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - opensports-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opensports"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: opensports-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - opensports-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: opensports-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - opensports-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: opensports-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - opensports-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opensports-celery-worker
    command: celery -A opensports.core.celery worker --loglevel=info
    environment:
      - OPENSPORTS_ENV=production
      - DATABASE_URL=postgresql://opensports:opensports@postgres:5432/opensports
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - opensports-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opensports-celery-beat
    command: celery -A opensports.core.celery beat --loglevel=info
    environment:
      - OPENSPORTS_ENV=production
      - DATABASE_URL=postgresql://opensports:opensports@postgres:5432/opensports
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - opensports-network
    restart: unless-stopped

  # Streamlit Dashboard
  opensports-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opensports-dashboard
    command: streamlit run opensports/visualization/dashboard.py --server.port=8501 --server.address=0.0.0.0
    ports:
      - "8501:8501"
    environment:
      - OPENSPORTS_ENV=production
      - DATABASE_URL=postgresql://opensports:opensports@postgres:5432/opensports
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - opensports-api
      - postgres
      - redis
    networks:
      - opensports-network
    restart: unless-stopped

  # Monitoring Dashboard
  opensports-monitoring:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: opensports-monitoring
    command: streamlit run opensports/monitoring/dashboard.py --server.port=8502 --server.address=0.0.0.0
    ports:
      - "8502:8502"
    environment:
      - OPENSPORTS_ENV=production
      - DATABASE_URL=postgresql://opensports:opensports@postgres:5432/opensports
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - opensports-api
      - postgres
      - redis
    networks:
      - opensports-network
    restart: unless-stopped

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: opensports-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - opensports-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: opensports-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=opensports
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - opensports-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: opensports-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - opensports-api
      - opensports-dashboard
      - opensports-monitoring
    networks:
      - opensports-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  opensports-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 