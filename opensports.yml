# OpenSports Platform Configuration
# Comprehensive sports analytics platform configuration
# Author: Nik Jois (nikjois@llamaearch.ai)

project:
  name: "OpenSports"
  version: "1.0.0"
  description: "World-class sports analytics platform"
  author: "Nik Jois"
  email: "nikjois@llamaearch.ai"
  license: "MIT"
  repository: "https://github.com/nikjois/opensports"

# Environment Configuration
environments:
  development:
    database_url: "postgresql://localhost:5432/opensports_dev"
    redis_url: "redis://localhost:6379/0"
    debug: true
    log_level: "DEBUG"
    
  testing:
    database_url: "postgresql://localhost:5432/opensports_test"
    redis_url: "redis://localhost:6379/1"
    debug: true
    log_level: "INFO"
    
  staging:
    database_url: "${DATABASE_URL}"
    redis_url: "${REDIS_URL}"
    debug: false
    log_level: "INFO"
    
  production:
    database_url: "${DATABASE_URL}"
    redis_url: "${REDIS_URL}"
    debug: false
    log_level: "WARNING"

# Sports Configuration
sports:
  supported:
    - nba
    - nfl
    - soccer
    - formula1
    
  data_sources:
    nba:
      api_url: "https://stats.nba.com/stats"
      rate_limit: 60  # requests per minute
      endpoints:
        - "leaguegamefinder"
        - "playergamelog"
        - "teamgamelog"
        - "boxscoretraditionalv2"
        
    nfl:
      api_url: "https://api.sportsdata.io/v3/nfl"
      rate_limit: 1000
      endpoints:
        - "scores"
        - "player-stats"
        - "team-stats"
        
    soccer:
      api_url: "https://api.football-data.org/v4"
      rate_limit: 100
      endpoints:
        - "competitions"
        - "matches"
        - "teams"
        - "players"
        
    formula1:
      api_url: "https://ergast.com/api/f1"
      rate_limit: 200
      endpoints:
        - "races"
        - "results"
        - "drivers"
        - "constructors"

# Analytics Configuration
analytics:
  models:
    player_performance:
      algorithms:
        - "random_forest"
        - "gradient_boosting"
        - "neural_network"
      features:
        - "historical_stats"
        - "opponent_strength"
        - "venue_factors"
        - "weather_conditions"
        
    team_performance:
      algorithms:
        - "ensemble_methods"
        - "time_series"
      features:
        - "player_composition"
        - "coaching_changes"
        - "injury_reports"
        
    game_prediction:
      algorithms:
        - "xgboost"
        - "lightgbm"
        - "deep_learning"
      features:
        - "team_form"
        - "head_to_head"
        - "betting_odds"

# Data Pipeline Configuration
data_pipeline:
  ingestion:
    batch_size: 1000
    retry_attempts: 3
    timeout: 30
    
  processing:
    parallel_workers: 4
    chunk_size: 10000
    
  storage:
    retention_days: 365
    compression: "gzip"
    partitioning: "date"

# API Configuration
api:
  host: "0.0.0.0"
  port: 8000
  workers: 4
  timeout: 30
  
  rate_limiting:
    requests_per_minute: 1000
    burst_size: 100
    
  authentication:
    jwt_secret: "${JWT_SECRET}"
    token_expiry: 3600
    
  cors:
    origins:
      - "http://localhost:3000"
      - "https://opensports.ai"
    methods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"

# Monitoring Configuration
monitoring:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"
    
  tracing:
    enabled: true
    jaeger_endpoint: "http://localhost:14268/api/traces"
    
  logging:
    format: "json"
    level: "INFO"
    
  alerts:
    email:
      smtp_server: "smtp.gmail.com"
      smtp_port: 587
      
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channel: "#alerts"

# Security Configuration
security:
  encryption:
    algorithm: "AES-256-GCM"
    key_rotation_days: 90
    
  authentication:
    password_min_length: 8
    password_complexity: true
    mfa_enabled: true
    
  api_security:
    rate_limiting: true
    input_validation: true
    sql_injection_protection: true
    xss_protection: true

# Deployment Configuration
deployment:
  docker:
    base_image: "python:3.11-slim"
    registry: "ghcr.io"
    
  kubernetes:
    namespace: "opensports"
    replicas: 3
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
        
  scaling:
    min_replicas: 2
    max_replicas: 10
    target_cpu_utilization: 70

# CI/CD Configuration
cicd:
  pipeline_id: "opensports-pipeline"
  
  stages:
    - name: "build"
      type: "build"
      command: "python -m build"
      
    - name: "test"
      type: "test"
      command: "python -m pytest"
      dependencies: ["build"]
      
    - name: "quality"
      type: "quality"
      dependencies: ["test"]
      
    - name: "security"
      type: "security"
      dependencies: ["test"]
      
    - name: "deploy-staging"
      type: "deploy"
      environment: "staging"
      dependencies: ["quality", "security"]
      condition: "branch == 'develop'"
      
    - name: "deploy-production"
      type: "deploy"
      environment: "production"
      dependencies: ["quality", "security"]
      condition: "tag_release == true"

# Testing Configuration
testing:
  unit_tests:
    coverage_threshold: 80
    parallel: true
    
  integration_tests:
    database_reset: true
    fixtures: true
    
  performance_tests:
    load_threshold: 1000  # requests per second
    response_time_threshold: 200  # milliseconds
    
  security_tests:
    vulnerability_scan: true
    penetration_test: false

# Feature Flags
features:
  real_time_analytics: true
  ai_predictions: true
  social_features: false
  premium_analytics: true
  mobile_app: false

# External Services
external_services:
  openai:
    api_key: "${OPENAI_API_KEY}"
    model: "gpt-4"
    max_tokens: 4000
    
  anthropic:
    api_key: "${ANTHROPIC_API_KEY}"
    model: "claude-3-sonnet"
    
  redis:
    host: "${REDIS_HOST}"
    port: 6379
    password: "${REDIS_PASSWORD}"
    
  postgresql:
    host: "${DB_HOST}"
    port: 5432
    database: "${DB_NAME}"
    username: "${DB_USER}"
    password: "${DB_PASSWORD}"

# Backup Configuration
backup:
  database:
    frequency: "daily"
    retention_days: 30
    compression: true
    
  files:
    frequency: "weekly"
    retention_weeks: 12
    
  disaster_recovery:
    rpo: 1  # hours
    rto: 4  # hours

# Performance Configuration
performance:
  caching:
    redis_ttl: 3600
    memory_cache_size: "1GB"
    
  database:
    connection_pool_size: 20
    query_timeout: 30
    
  api:
    response_compression: true
    static_file_caching: true

# Compliance Configuration
compliance:
  gdpr:
    enabled: true
    data_retention_days: 365
    
  ccpa:
    enabled: true
    
  data_classification:
    public: ["team_stats", "game_results"]
    internal: ["user_preferences", "analytics_results"]
    confidential: ["user_data", "api_keys"]
    restricted: ["financial_data", "personal_info"] 